# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04, macos-13, windows-2019]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake on Windows
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: runner.os == 'Windows'
      run: |
        cmd /c rmdir /s /q build
        mkdir build
        cmake -B build -G "Visual Studio 17 2022" -T v142 -A x64
        
    - name: Build
      if: runner.os == 'Windows'
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Configure CMake on Linux and MacOS
      if: runner.os != 'Windows'
      run: |
        rm -rf build
        mkdir build
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      if: runner.os != 'Windows'
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build build

    - name: Test on Linux and macOS
      if: runner.os != 'Windows'
      run: ./build/bin/main

    - name: Test on Windows
      if: runner.os == 'Windows'
      run: .\build\bin\Release\main.exe
